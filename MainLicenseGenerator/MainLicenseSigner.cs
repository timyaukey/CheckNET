using System;
using System.Security.Cryptography;

namespace Willowsoft.CheckBook.LicenseGenerator
{
    // Code generated by TamperProofCoder.CodeFactory
    // WARNING! This signer class contains your private key, and must NEVER be
    // distributed to end users in source or compiled form! It generally belongs
    // to a separate project/assembly used only for generating signatures.
    public class MainLicenseSigner : Willowsoft.TamperProofData.Signer
    {
        protected override RSAParameters GetPrivateKey()
        {
            RSAParameters rsap = new RSAParameters();
            rsap.D = new byte[] { 171, 29, 152, 120, 196, 159, 241, 200, 169, 137, 166, 206, 173, 70, 31, 194,
              62, 107, 234, 79, 51, 178, 186, 244, 219, 99, 73, 11, 220, 150, 135, 39,
              113, 237, 193, 111, 161, 183, 106, 106, 16, 221, 140, 246, 150, 173, 5, 54,
              12, 150, 55, 53, 237, 60, 156, 195, 21, 242, 208, 117, 9, 185, 79, 4,
              0, 32, 81, 153, 55, 64, 3, 69, 207, 128, 85, 126, 164, 52, 163, 92,
              29, 103, 208, 250, 145, 78, 204, 59, 65, 250, 28, 51, 79, 28, 118, 168,
              240, 149, 182, 55, 103, 216, 207, 104, 173, 108, 255, 188, 147, 161, 170, 195,
              7, 46, 243, 188, 111, 97, 139, 83, 156, 93, 104, 174, 219, 158, 22, 149 };
            rsap.DP = new byte[] { 26, 140, 48, 139, 2, 11, 244, 163, 20, 160, 33, 110, 64, 218, 110, 41,
              69, 122, 173, 30, 150, 230, 208, 121, 204, 252, 212, 132, 93, 200, 122, 162,
              95, 84, 194, 91, 50, 62, 89, 78, 132, 40, 211, 146, 81, 115, 138, 56,
              201, 164, 211, 186, 197, 67, 109, 163, 207, 156, 161, 116, 230, 2, 168, 231 };
            rsap.DQ = new byte[] { 8, 242, 151, 27, 101, 154, 84, 169, 169, 204, 254, 76, 121, 228, 39, 51,
              226, 153, 32, 189, 198, 172, 194, 33, 148, 139, 241, 125, 229, 93, 205, 158,
              121, 25, 225, 95, 237, 27, 173, 249, 85, 100, 240, 132, 149, 31, 31, 161,
              177, 63, 37, 204, 196, 54, 197, 160, 93, 107, 23, 192, 136, 218, 229, 53 };
            rsap.Exponent = new byte[] { 1, 0, 1 };
            rsap.InverseQ = new byte[] { 47, 90, 16, 103, 239, 94, 242, 62, 183, 226, 63, 196, 254, 147, 104, 59,
              27, 198, 236, 100, 18, 11, 238, 204, 157, 91, 236, 171, 128, 219, 167, 0,
              20, 68, 51, 157, 147, 69, 253, 141, 75, 47, 157, 13, 179, 65, 62, 187,
              5, 127, 169, 14, 221, 97, 218, 243, 52, 196, 27, 232, 18, 237, 192, 213 };
            rsap.Modulus = new byte[] { 201, 66, 137, 161, 10, 93, 11, 199, 44, 162, 159, 63, 240, 130, 250, 196,
              205, 147, 253, 174, 47, 53, 253, 167, 174, 47, 94, 145, 243, 91, 180, 188,
              90, 136, 46, 142, 86, 87, 91, 98, 25, 98, 237, 188, 252, 81, 114, 146,
              203, 246, 28, 178, 95, 50, 94, 20, 192, 78, 250, 106, 207, 61, 249, 231,
              10, 155, 15, 50, 101, 78, 148, 21, 73, 49, 184, 93, 174, 170, 216, 117,
              109, 70, 124, 103, 3, 164, 59, 113, 101, 104, 250, 207, 118, 82, 139, 205,
              45, 187, 155, 83, 128, 115, 59, 41, 224, 151, 208, 177, 223, 47, 146, 251,
              1, 248, 102, 245, 161, 215, 248, 200, 134, 237, 210, 153, 247, 186, 206, 57 };
            rsap.P = new byte[] { 217, 5, 45, 7, 215, 154, 204, 3, 255, 249, 141, 47, 44, 63, 115, 27,
              25, 82, 13, 132, 10, 67, 91, 96, 164, 55, 25, 92, 66, 244, 238, 208,
              213, 202, 55, 94, 113, 71, 221, 105, 198, 46, 140, 105, 6, 138, 163, 145,
              32, 151, 37, 146, 63, 190, 47, 76, 148, 209, 97, 153, 253, 224, 221, 7 };
            rsap.Q = new byte[] { 237, 104, 175, 146, 54, 18, 228, 3, 252, 139, 78, 182, 216, 227, 76, 232,
              89, 61, 20, 210, 139, 37, 48, 32, 51, 38, 143, 56, 14, 122, 155, 232,
              166, 178, 27, 246, 184, 220, 11, 76, 108, 112, 140, 72, 184, 116, 146, 216,
              21, 165, 27, 249, 147, 85, 98, 201, 98, 103, 195, 217, 23, 199, 106, 191 };
            return rsap;
        }
    }
}
