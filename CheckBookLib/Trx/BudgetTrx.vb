Option Strict On
Option Explicit On

Public Class BudgetTrx
    Inherits Trx

    'Original budget amount, or zero if mblnBudget=False.
    'Is NOT changed as other Trx are applied and unapplied to this one.
    'Sign has the same meaning as Split.curAmount, so is normally negative.
    Protected mcurBudgetLimit As Decimal
    'Last date in the budget period. Budget period starts at mdatDate.
    Protected mdatBudgetEnds As Date
    'For budget Trx, a unique ID for that budget. All budget Trx in a repeating
    'budget will have the same mstrBudgetKey, and the appropriate one for applying
    'Trx will be chosen by the budget period. Is a foreign key into some external
    'database defining how to create budget Trx.
    Protected mstrBudgetKey As String
    'Unit of time to which mintBudgetPeriodNumber applies.
    Protected mlngBudgetPeriodUnit As RepeatUnit
    'Number of mlngBudgetPeriodUnit in budget period.
    Protected mintBudgetPeriodNumber As Short
    'Amount applied toward budget. Magnitude may be greater than mcurBudgetLimit,
    'in which case mcurAmount will equal zero instead of a credit.
    Protected mcurBudgetApplied As Decimal
    'Collection of Split objects belonging to other Trx and applied to this
    'budget Trx. Nothing if this is not a budget Trx.
    Protected mcolAppliedSplits As List(Of TrxSplit)

    Public Sub New(ByVal objReg_ As Register)
        MyBase.New(objReg_)
    End Sub

    '$Description Initialize a new budget Trx object. Normally followed by
    '   Register.NewLoadEnd() or Register.NewAddEnd().

    Public Sub NewStartBudget(ByVal blnWillAddToRegister As Boolean, ByVal datDate_ As Date, ByVal strDescription_ As String,
                              ByVal strMemo_ As String, ByVal blnAwaitingReview_ As Boolean, ByVal blnAutoGenerated_ As Boolean,
                              ByVal intRepeatSeq_ As Integer, ByVal strRepeatKey_ As String, ByVal curBudgetLimit_ As Decimal,
                              ByVal datBudgetEnds_ As Date, ByVal strBudgetKey_ As String)

        If blnWillAddToRegister Then
            mobjReg.ClearFirstAffected()
        End If

        mstrNumber = "Budget"
        mdatDate = datDate_
        mstrDescription = strDescription_
        mstrMemo = strMemo_
        mlngStatus = TrxStatus.glngTRXSTS_NONBANK
        mblnFake = True
        mblnAwaitingReview = blnAwaitingReview_
        mblnAutoGenerated = blnAutoGenerated_
        mintRepeatSeq = intRepeatSeq_
        mstrRepeatKey = strRepeatKey_

        mcurBudgetLimit = curBudgetLimit_
        mdatBudgetEnds = datBudgetEnds_
        mstrBudgetKey = strBudgetKey_
        mcurBudgetApplied = 0

        If blnWillAddToRegister Then
            SetAmountForBudget(mobjReg.datOldestBudgetEndAllowed)
        End If
        mcurBalance = 0

        mcolAppliedSplits = New List(Of TrxSplit)

        RaiseErrorOnBadData("NewStartBudget")
        RaiseErrorOnBadBudget("NewStartBudget")

    End Sub

    '$Description Update all updatable properties of this budget Trx object.
    '   Normally followed Register.UpdateEnd().

    Public Sub UpdateStartBudget(ByVal datDate_ As Date, ByVal strDescription_ As String, ByVal strMemo_ As String,
                                 ByVal blnAwaitingReview_ As Boolean, ByVal blnAutoGenerated_ As Boolean,
                                 ByVal intRepeatSeq_ As Integer, ByVal strRepeatKey_ As String, ByVal curBudgetLimit_ As Decimal,
                                 ByVal datBudgetEnds_ As Date, ByVal strBudgetKey_ As String, ByVal datOldestBudgetEndAllowed As Date)

        mdatDate = datDate_
        mstrDescription = strDescription_
        mstrMemo = strMemo_
        mblnAwaitingReview = blnAwaitingReview_
        mblnAutoGenerated = blnAutoGenerated_
        mintRepeatSeq = intRepeatSeq_
        mstrRepeatKey = strRepeatKey_
        mcurBudgetLimit = curBudgetLimit_
        mdatBudgetEnds = datBudgetEnds_
        mstrBudgetKey = strBudgetKey_

        'We do NOT clear mcurBudgetApplied, because updating the budget
        'does not change what splits have been applied to it.
        SetAmountForBudget(datOldestBudgetEndAllowed)
        mcurBalance = 0

        'Will not unapply any budgets, even though the budget period or budget key
        'may have been changed by this update. The caller should warn the operator
        'that normal transactions will not be reapplied to budgets until they are
        'edited and saved or the register reloaded.

        RaiseErrorOnBadData("UpdateStartBudget")
        RaiseErrorOnBadBudget("UpdateStartBudget")
    End Sub

    Public Overrides ReadOnly Property lngType As TrxType
        Get
            Return TrxType.glngTRXTYP_BUDGET
        End Get
    End Property

    Public Property curBudgetLimit() As Decimal
        Get
            curBudgetLimit = mcurBudgetLimit
        End Get
        Set(value As Decimal)
            mcurBudgetLimit = value
        End Set
    End Property

    Public ReadOnly Property datBudgetEnds() As Date
        Get
            datBudgetEnds = mdatBudgetEnds
        End Get
    End Property

    Public ReadOnly Property strBudgetKey() As String
        Get
            strBudgetKey = mstrBudgetKey
        End Get
    End Property

    Public ReadOnly Property lngBudgetPeriodUnit() As RepeatUnit
        Get
            lngBudgetPeriodUnit = mlngBudgetPeriodUnit
        End Get
    End Property

    Public ReadOnly Property intBudgetPeriodNumber() As Short
        Get
            intBudgetPeriodNumber = mintBudgetPeriodNumber
        End Get
    End Property

    Public ReadOnly Property curBudgetApplied() As Decimal
        Get
            curBudgetApplied = mcurBudgetApplied
        End Get
    End Property

    Protected Sub RaiseErrorOnBadBudget(ByVal strRoutine As String)
        If mstrBudgetKey = "" Then
            gRaiseError("Missing budget key in " & strRoutine)
        End If
        If mdatBudgetEnds = System.DateTime.FromOADate(0) Then
            gRaiseError("Missing budget end date in " & strRoutine)
        End If
        If mdatBudgetEnds < mdatDate Then
            gRaiseError("Budget period ends before it begins")
        End If
    End Sub

    '$Description Set all repeating Trx properties exclusive to budget Trx.

    Public Sub SetBudgetRptProps(ByVal lngBudgetPeriodUnit_ As RepeatUnit, ByVal intBudgetPeriodNumber_ As Short)

        mlngBudgetPeriodUnit = lngBudgetPeriodUnit_
        mintBudgetPeriodNumber = intBudgetPeriodNumber_
    End Sub

    '$Description Set mcurAmount for a budget Trx. Called whenever
    '   mcurBudgetApplied or mcurBudgetLimit changes.

    Public Sub SetAmountForBudget(ByVal datOldestEnd As Date)
        If System.Math.Abs(mcurBudgetApplied) > System.Math.Abs(mcurBudgetLimit) Or mdatBudgetEnds < datOldestEnd Then
            mcurAmount = 0
        Else
            mcurAmount = mcurBudgetLimit - mcurBudgetApplied
        End If
    End Sub

    '$Description Apply a Split to the budget Trx which is ourself.
    '   Called only by Split.ApplyToBudget().

    Public Sub ApplyToThisBudget(ByVal objSplit As TrxSplit, ByVal objReg As Register)
        mcolAppliedSplits.Add(objSplit)
        mcurBudgetApplied = mcurBudgetApplied + objSplit.curAmount
        SetAmountForBudget(objReg.datOldestBudgetEndAllowed)
        objReg.RaiseBudgetChanged(Me)
    End Sub

    '$Description Un-apply a Split from the budget Trx which is ourself.
    '   Called only by Split.UnApplyFromBudget().

    Public Sub UnApplyFromThisBudget(ByVal objSplit As TrxSplit, ByVal objReg As Register)
        If Not mcolAppliedSplits.Remove(objSplit) Then
            gRaiseError("Could not find split in Trx.UnApplyFromThisBudget")
        End If
        mcurBudgetApplied = mcurBudgetApplied - objSplit.curAmount
        SetAmountForBudget(objReg.datOldestBudgetEndAllowed)
        objReg.RaiseBudgetChanged(Me)
    End Sub

    '$Description Un-apply all splits applied to this budget Trx. Must be done
    '   for any budget being deleted from the register. Does nothing if this Trx
    '   is not a budget.

    Public Sub DestroyThisBudget()
        Dim objSplit As TrxSplit
        For Each objSplit In mcolAppliedSplits
            objSplit.ClearBudgetReference()
        Next objSplit
        mcolAppliedSplits = Nothing
    End Sub

    Public Sub ClearThisBudget()
        mcurBudgetApplied = 0
        mcolAppliedSplits = New List(Of TrxSplit)
    End Sub

    Public Overrides Function objClone(ByVal blnWillAddToRegister As Boolean) As Trx
        Dim objBudgetTrx As BudgetTrx = New BudgetTrx(mobjReg)
        objBudgetTrx.NewStartBudget(blnWillAddToRegister, mdatDate, mstrDescription, mstrMemo, mblnAwaitingReview, mblnAutoGenerated,
                                    mintRepeatSeq, mstrRepeatKey, mcurBudgetLimit, mdatBudgetEnds, mstrBudgetKey)
        objBudgetTrx.SetAmount(mcurAmount)
        Return objBudgetTrx
    End Function

    Public Function objGetTrxManager(objReg As Register) As BudgetTrxManager
        Return New BudgetTrxManager(objReg, objReg.lngTrxIndex(Me), Me)
    End Function

    Public Function objGetTrxManager(objReg As Register, lngIndex As Integer) As BudgetTrxManager
        Return New BudgetTrxManager(objReg, lngIndex, Me)
    End Function

    Public Overrides Sub Validate()
        Dim objSplit As TrxSplit
        Dim curTotal As Decimal
        MyBase.Validate()
        If mstrBudgetKey = "" Then
            objReg.RaiseValidationError(lngIndex, "Budget trx requires budget key")
            Exit Sub
        End If
        If mcolAppliedSplits Is Nothing Then
            objReg.RaiseValidationError(lngIndex, "Missing applied split collection")
        Else
            curTotal = 0
            For Each objSplit In mcolAppliedSplits
                curTotal = curTotal + objSplit.curAmount
                If Not objSplit.objBudget Is Me Then
                    objReg.RaiseValidationError(lngIndex, "Split applied to budget trx has wrong objBudget")
                End If
                If objSplit.strBudgetKey <> mstrBudgetKey Then
                    objReg.RaiseValidationError(lngIndex, "Split applied to budget trx has wrong budget key")
                End If
            Next objSplit
            If curTotal <> mcurBudgetApplied Then
                objReg.RaiseValidationError(lngIndex, "Budget trx applied splits add up wrong")
            End If
        End If
        If Not mblnFake Then
            objReg.RaiseValidationError(lngIndex, "Budget trx must be fake")
        End If
    End Sub
End Class
