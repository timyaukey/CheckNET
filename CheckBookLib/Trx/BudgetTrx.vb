Option Strict On
Option Explicit On

Public Class BudgetTrx
    Inherits Trx

    '$Description Initialize a new budget Trx object. Normally followed by
    '   Register.NewLoadEnd() or Register.NewAddEnd().

    Public Sub NewStartBudget(ByVal objReg As Register, ByVal datDate_ As Date, ByVal strDescription_ As String, ByVal strMemo_ As String, ByVal blnAwaitingReview_ As Boolean, ByVal blnAutoGenerated_ As Boolean, ByVal intRepeatSeq_ As Integer, ByVal strRepeatKey_ As String, ByVal curBudgetLimit_ As Decimal, ByVal datBudgetEnds_ As Date, ByVal strBudgetKey_ As String)

        If Not objReg Is Nothing Then
            objReg.ClearFirstAffected()
        End If

        mstrNumber = "Budget"
        mdatDate = datDate_
        mstrDescription = strDescription_
        mstrMemo = strMemo_
        mlngStatus = TrxStatus.glngTRXSTS_NONBANK
        mblnFake = True
        mcurNormalMatchRange = 0
        mblnAwaitingReview = blnAwaitingReview_
        mblnAutoGenerated = blnAutoGenerated_
        mintRepeatSeq = intRepeatSeq_
        mstrImportKey = ""
        mstrRepeatKey = strRepeatKey_

        mstrTransferKey = ""
        mcurTransferAmount = 0
        mcurBudgetLimit = curBudgetLimit_
        mdatBudgetEnds = datBudgetEnds_
        mstrBudgetKey = strBudgetKey_
        mcurBudgetApplied = 0

        If Not objReg Is Nothing Then
            SetAmountForBudget(objReg.datOldestBudgetEndAllowed)
        End If
        mcurBalance = 0

        mcolAppliedSplits = New List(Of TrxSplit)
        'UPGRADE_NOTE: Object mcolSplits may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mcolSplits = Nothing

        RaiseErrorOnBadData("NewStartBudget")
        RaiseErrorOnBadBudget("NewStartBudget")

    End Sub

    '$Description Update all updatable properties of this budget Trx object.
    '   Normally followed Register.UpdateEnd().

    Public Sub UpdateStartBudget(ByVal datDate_ As Date, ByVal strDescription_ As String, ByVal strMemo_ As String,
                                 ByVal blnAwaitingReview_ As Boolean, ByVal blnAutoGenerated_ As Boolean,
                                 ByVal intRepeatSeq_ As Integer, ByVal strRepeatKey_ As String, ByVal curBudgetLimit_ As Decimal,
                                 ByVal datBudgetEnds_ As Date, ByVal strBudgetKey_ As String, ByVal datOldestBudgetEndAllowed As Date)

        mdatDate = datDate_
        mstrDescription = strDescription_
        mstrMemo = strMemo_
        mblnAwaitingReview = blnAwaitingReview_
        mblnAutoGenerated = blnAutoGenerated_
        mintRepeatSeq = intRepeatSeq_
        mstrRepeatKey = strRepeatKey_
        mcurBudgetLimit = curBudgetLimit_
        mdatBudgetEnds = datBudgetEnds_
        mstrBudgetKey = strBudgetKey_

        'We do NOT clear mcurBudgetApplied, because updating the budget
        'does not change what splits have been applied to it.
        SetAmountForBudget(datOldestBudgetEndAllowed)
        mcurBalance = 0

        'Will not unapply any budgets, even though the budget period or budget key
        'may have been changed by this update. The caller should warn the operator
        'that normal transactions will not be reapplied to budgets until they are
        'edited and saved or the register reloaded.

        RaiseErrorOnBadData("UpdateStartBudget")
        RaiseErrorOnBadBudget("UpdateStartBudget")
    End Sub

    Public Overrides ReadOnly Property lngType As TrxType
        Get
            Return TrxType.glngTRXTYP_BUDGET
        End Get
    End Property

    Public Overrides Function objClone(objReg As Register) As Trx
        Dim objBudgetTrx As BudgetTrx = New BudgetTrx()
        objBudgetTrx.NewStartBudget(objReg, mdatDate, mstrDescription, mstrMemo, mblnAwaitingReview, mblnAutoGenerated, mintRepeatSeq, mstrRepeatKey, mcurBudgetLimit, mdatBudgetEnds, mstrBudgetKey)
        objBudgetTrx.SetAmount(mcurAmount)
        Return objBudgetTrx
    End Function

    Public Overrides Function objGetTrxManager(objReg As Register, lngIndex As Integer) As TrxManager
        Return New BudgetTrxManager(objReg, lngIndex, Me)
    End Function

    Public Overrides Sub Validate(objReg As Register, lngIndex As Integer)
        Dim objSplit As TrxSplit
        Dim curTotal As Decimal
        MyBase.Validate(objReg, lngIndex)
        If mstrBudgetKey = "" Then
            objReg.RaiseValidationError(lngIndex, "Budget trx requires budget key")
            Exit Sub
        End If
        If mcolAppliedSplits Is Nothing Then
            objReg.RaiseValidationError(lngIndex, "Missing applied split collection")
        Else
            curTotal = 0
            For Each objSplit In mcolAppliedSplits
                curTotal = curTotal + objSplit.curAmount
                If Not objSplit.objBudget Is Me Then
                    objReg.RaiseValidationError(lngIndex, "Split applied to budget trx has wrong objBudget")
                End If
                If objSplit.strBudgetKey <> mstrBudgetKey Then
                    objReg.RaiseValidationError(lngIndex, "Split applied to budget trx has wrong budget key")
                End If
            Next objSplit
            If curTotal <> mcurBudgetApplied Then
                objReg.RaiseValidationError(lngIndex, "Budget trx applied splits add up wrong")
            End If
        End If
        If mstrTransferKey <> "" Then
            objReg.RaiseValidationError(lngIndex, "Budget trx cannot have transfer key")
        End If
        If mcurTransferAmount <> 0 Then
            objReg.RaiseValidationError(lngIndex, "Budget trx cannot have transfer amount")
        End If
        If Not mblnFake Then
            objReg.RaiseValidationError(lngIndex, "Budget trx must be fake")
        End If
        If Not mcolSplits Is Nothing Then
            objReg.RaiseValidationError(lngIndex, "Budget trx cannot have split collection")
        End If
    End Sub
End Class
