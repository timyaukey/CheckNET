Option Strict On
Option Explicit On

''' <summary>
''' Represents one transaction. Subclassed for different kinds of transactions.
'''
''' To create a transaction and add it to a Register, instantiate a NormalTrx, BudgetTrx
''' or TransferTrx and call NewStartNormal(), NewStartBudget() or NewStartTransfer() on
''' that instance. For a NormalTrx add at least one split with AddSplit(). Then call 
''' Register.NewLoadEnd() if you are in the process of loading a Register from some external
''' source, and will note the end of the load by calling Register.LoadPostProcessing(). 
''' Otherwise call Register.NewAddEnd(), which is what will typically happen if you are 
''' adding to a Register which is already visible in the UI.
''' 
''' To update an existing transaction, use Register.objGetNormalTrxManager(),
''' Register.objGetBudgetTrxManager() or Register.objGetTransferTrxManager() to
''' get a TrxManager subclass for the desired Trx, and call UpdateStart() on that
''' TrxManager. Then call NormalTrxManager.objTrx.UpdateStartNormal(), 
''' BudgetTrxManager.objTrx.UpdateStartBudget(), or TransferTrxManager.objTrx.UpdateStartTransfer().
''' Then call NormalTrx.AddSplit() at least once if you are working with a NormalTrx. 
''' Then call TrxManager.UpdateEnd().
''' 
''' To delete a transaction, call either Register.Delete() or Trx.Delete().
'''
''' The UI is not updated directly by the caller to these methods, rather it is
''' updated indirectly by responding to events fired by the Register object as
''' its methods are called and complete their tasks.
''' </summary>

Public MustInherit Class Trx

    Public Enum TrxStatus
        'Missing value (should never be this).
        Missing = 0
        'Unreconciled (new).
        Unreconciled = 1
        'Reconciled.
        Reconciled = 2
        'Non-bank (budget, transfer, etc.)
        NonBank = 3
        'Selected in current reconciliation.
        Selected = 4
    End Enum

    Public Enum RepeatUnit
        Missing = 0
        Day = 1
        Week = 2
        Month = 3
    End Enum

    'Register this Trx belongs to.
    Protected mobjReg As Register
    'Index of this Trx in mobjReg.objTrx().
    Protected mlngIndex As Integer
    'Transaction number.
    Protected mstrNumber As String
    'Transaction date.
    Protected mdatDate As Date
    'Payee name, or other description.
    Protected mstrDescription As String
    'Transaction memo.
    Protected mstrMemo As String
    'Transaction status.
    Protected mlngStatus As TrxStatus
    'Is this transaction fake (future dated)?
    Protected mblnFake As Boolean
    'Trx needs to be reviewed by the operator.
    Protected mblnAwaitingReview As Boolean
    'Trx was added to register as part of an automatically generated
    'series. Such a Trx will always have a non-empty mstrRepeatKey,
    'but a non-empty mstrRepeatKey does not imply mblnAutoGenerated=True.
    Protected mblnAutoGenerated As Boolean
    'Sequence number of Trx in generated sequence.
    Protected mintRepeatSeq As Integer
    'All fake and real Trx originating from the same generated sequence
    'have the same value.
    Protected mstrRepeatKey As String
    'Computed from the sum of the Split amounts for normal trx.
    'Set directly for other trx types.
    Protected mcurAmount As Decimal
    'Original amount for a generated trx. This value is not persisted.
    Protected mcurGeneratedAmount As Decimal
    'Register balance after mcurAmount added.
    Protected mcurBalance As Decimal

    Public Sub New(ByVal objReg_ As Register)
        mobjReg = objReg_
    End Sub

    Public Property objReg() As Register
        Get
            Return mobjReg
        End Get
        Set(value As Register)
            mobjReg = value
        End Set
    End Property

    Public Sub ClearRepeatTrx()
        If mintRepeatSeq > 0 Then
            'Remove the repeat trx index entry for the old values
            'of repeat key and repeat seq, which may be different
            'than the new ones.
            mobjReg.RemoveRepeatTrx(Me)
        End If
    End Sub

    Public Property lngIndex() As Integer
        Set(value As Integer)
            mlngIndex = value
        End Set
        Get
            Return mlngIndex
        End Get
    End Property

    Public ReadOnly Property objNext() As Trx
        Get
            If mlngIndex >= mobjReg.lngTrxCount Then
                Return Nothing
            Else
                Return mobjReg.objTrx(mlngIndex + 1)
            End If
        End Get
    End Property

    Public ReadOnly Property objPrevious() As Trx
        Get
            If mlngIndex <= 1 Then
                Return Nothing
            Else
                Return mobjReg.objTrx(mlngIndex - 1)
            End If
        End Get
    End Property

    Public ReadOnly Property strRepeatKey() As String
        Get
            Return mstrRepeatKey
        End Get
    End Property

    Public ReadOnly Property intRepeatSeq() As Integer
        Get
            Return mintRepeatSeq
        End Get
    End Property

    Public ReadOnly Property strRepeatId() As String
        Get
            Return strMakeRepeatId(mstrRepeatKey, mintRepeatSeq)
        End Get
    End Property

    Public Shared Function strMakeRepeatId(ByVal strRepeatKey As String, ByVal intRepeatSeq As Integer) As String
        Return "#" & strRepeatKey & "." & intRepeatSeq
    End Function

    Public Sub ClearRepeat()
        mintRepeatSeq = 0
        mstrRepeatKey = ""
    End Sub

    Public Property strNumber() As String
        Get
            Return mstrNumber
        End Get
        Set(value As String)
            mstrNumber = value
        End Set
    End Property

    Public Property datDate() As Date
        Get
            Return mdatDate
        End Get
        Set(value As Date)
            mdatDate = value
        End Set
    End Property

    Public ReadOnly Property strDescription() As String
        Get
            Return mstrDescription
        End Get
    End Property

    Public MustOverride ReadOnly Property strCategory() As String

    Public ReadOnly Property strMemo() As String
        Get
            Return mstrMemo
        End Get
    End Property

    Public Property lngStatus() As TrxStatus
        Get
            Return mlngStatus
        End Get
        Set(value As TrxStatus)
            mlngStatus = value
        End Set
    End Property

    Public ReadOnly Property strStatus() As String
        Get
            Select Case mlngStatus
                Case TrxStatus.NonBank
                    Return "NonBank"
                Case TrxStatus.Unreconciled
                    Return "Unreconciled"
                Case TrxStatus.Selected
                    Return "Selected"
                Case TrxStatus.Reconciled
                    Return "Reconciled"
                Case Else
                    Return ""
            End Select
        End Get
    End Property

    Public Property blnFake() As Boolean
        Get
            Return mblnFake
        End Get
        Set(ByVal Value As Boolean)
            mblnFake = Value
        End Set
    End Property

    Public ReadOnly Property strFakeStatus() As String
        Get
            If mblnAutoGenerated Then
                Return "Gen"
            ElseIf mblnFake Then
                Return "Fake"
            Else
                Return ""
            End If
        End Get
    End Property

    Public ReadOnly Property blnAwaitingReview() As Boolean
        Get
            Return mblnAwaitingReview
        End Get
    End Property

    Public ReadOnly Property blnAutoGenerated() As Boolean
        Get
            Return mblnAutoGenerated
        End Get
    End Property

    ''' <summary>
    ''' The face value amount of the transaction.
    ''' </summary>
    ''' <returns></returns>
    Public Property curAmount() As Decimal
        Get
            Return mcurAmount
        End Get
        Set(value As Decimal)
            mcurAmount = value
        End Set
    End Property

    ''' <summary>
    ''' The amount this transaction will change the running balance in a register.
    ''' We distinguish this from the face value of the transaction because the
    ''' software may in the future treat some transactions as not affecting the balance.
    ''' </summary>
    ''' <returns></returns>
    Public ReadOnly Property curBalanceChange() As Decimal
        Get
            Return mcurAmount
        End Get
    End Property

    Public Property curGeneratedAmount() As Decimal
        Get
            Return mcurGeneratedAmount
        End Get
        Set(value As Decimal)
            mcurGeneratedAmount = value
        End Set
    End Property

    ''' <summary>
    ''' The register balance after adding this transaction.
    ''' </summary>
    ''' <returns></returns>
    Public Property curBalance() As Decimal
        Get
            Return mcurBalance
        End Get
        Set(value As Decimal)
            mcurBalance = value
        End Set
    End Property

    Protected Sub RaiseErrorOnBadData(ByVal strRoutine As String)
        If mdatDate = System.DateTime.FromOADate(0) Then
            gRaiseError("Missing date in " & strRoutine)
        End If
        If mstrDescription = "" Then
            gRaiseError("Missing description in " & strRoutine)
        End If
        If mlngStatus = TrxStatus.Missing Then
            gRaiseError("Missing status in " & strRoutine)
        End If
    End Sub

    Public MustOverride ReadOnly Property intTrxTypeSortKey() As Integer
    Public MustOverride ReadOnly Property strDocNumberSortKey() As String

    Public Overridable ReadOnly Property intAmountSortKey() As Integer
        Get
            Return If(mcurAmount > 0, 0, 1)
        End Get
    End Property

    Public Sub Delete(ByVal objDeleteLogger As ILogDelete, ByVal strLogTitle As String,
                      Optional ByVal blnSetChanged As Boolean = True)
        mobjReg.Delete(Me, objDeleteLogger, strLogTitle, blnSetChanged)
    End Sub

    Public MustOverride Sub UnApply()
    Public MustOverride Sub Apply(ByVal blnLoading As Boolean)

    '$Description Check for validation errors for Register.Validate().

    Public Overridable Sub Validate()
        Dim objRepeatTrx As Trx
        If Not mobjReg.objTrx(mlngIndex) Is Me Then
            mobjReg.RaiseValidationError(Me, "lngIndex is wrong")
        End If
        If mdatDate = System.DateTime.FromOADate(0) Then
            mobjReg.RaiseValidationError(Me, "Missing date")
        End If
        If mstrRepeatKey <> "" Then
            If mintRepeatSeq = 0 Then
                mobjReg.RaiseValidationError(Me, "Repeat key has no repeat seq")
            End If
            objRepeatTrx = objReg.objRepeatTrx(mstrRepeatKey, mintRepeatSeq)
            If Not objRepeatTrx Is Me Then
                mobjReg.RaiseValidationError(Me, "objRepeatTrx() returned wrong Trx")
            End If
        Else
            If mintRepeatSeq <> 0 Then
                mobjReg.RaiseValidationError(Me, "Repeat seq should be zero")
            End If
        End If
    End Sub

    Public MustOverride Function objClone(ByVal blnWillAddToRegister As Boolean) As Trx

    Public Overridable Function strSummary() As String
        Return Me.datDate.ToShortDateString() + " " + Me.strDescription + " " + Me.curAmount.ToString()
    End Function

    Public Overrides Function ToString() As String
        Return strSummary()
    End Function
End Class