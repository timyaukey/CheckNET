Option Strict On
Option Explicit On

Public Class TransferTrx
    Inherits Trx

    '$Description Initialize a new transfer Trx object. Normally followed by
    '   either Register.NewLoadEnd() or Register.NewAddEnd().

    Public Sub NewStartTransfer(ByVal objReg As Register, ByVal datDate_ As Date, ByVal strDescription_ As String, ByVal strMemo_ As String, ByVal blnFake_ As Boolean, ByVal blnAwaitingReview_ As Boolean, ByVal blnAutoGenerated_ As Boolean, ByVal intRepeatSeq_ As Integer, ByVal strRepeatKey_ As String, ByVal strTransferKey_ As String, ByVal curTransferAmount_ As Decimal)

        If Not objReg Is Nothing Then
            objReg.ClearFirstAffected()
        End If

        mstrNumber = "XFR"
        mdatDate = datDate_
        mstrDescription = strDescription_
        mstrMemo = strMemo_
        mlngStatus = TrxStatus.glngTRXSTS_NONBANK
        mblnFake = blnFake_
        mcurNormalMatchRange = 0
        mblnAwaitingReview = blnAwaitingReview_
        mblnAutoGenerated = blnAutoGenerated_
        mintRepeatSeq = intRepeatSeq_
        mstrImportKey = ""
        mstrRepeatKey = strRepeatKey_

        mstrTransferKey = strTransferKey_
        mcurTransferAmount = curTransferAmount_
        mcurBudgetLimit = 0
        mdatBudgetEnds = System.DateTime.FromOADate(0)
        mcurBudgetApplied = 0

        mcurAmount = mcurTransferAmount
        mcurBalance = 0

        'UPGRADE_NOTE: Object mcolAppliedSplits may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mcolAppliedSplits = Nothing
        'UPGRADE_NOTE: Object mcolSplits may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mcolSplits = Nothing

        RaiseErrorOnBadData("NewStartTransfer")
        RaiseErrorOnBadTransfer("NewStartTransfer")

    End Sub

    '$Description Update all updatable properties of this Trx transfer object.
    '   Normally followed by Register.UpdateEnd().

    Public Sub UpdateStartTransfer(ByVal datDate_ As Date, ByVal strDescription_ As String, ByVal strMemo_ As String, ByVal blnFake_ As Boolean, ByVal blnAwaitingReview_ As Boolean, ByVal blnAutoGenerated_ As Boolean, ByVal intRepeatSeq_ As Integer, ByVal strRepeatKey_ As String, ByVal curTransferAmount_ As Decimal)

        mdatDate = datDate_
        mstrDescription = strDescription_
        mstrMemo = strMemo_
        mblnFake = blnFake_
        mblnAwaitingReview = blnAwaitingReview_
        mblnAutoGenerated = blnAutoGenerated_
        mintRepeatSeq = intRepeatSeq_
        mstrRepeatKey = strRepeatKey_
        mcurTransferAmount = curTransferAmount_

        'We do NOT clear mcurBudgetApplied, because updating the budget
        'does not change what splits have been applied to it.
        mcurAmount = mcurTransferAmount
        mcurBalance = 0

        RaiseErrorOnBadData("UpdateStartTransfer")
        RaiseErrorOnBadTransfer("UpdateStartTransfer")
    End Sub

    Public Overrides ReadOnly Property lngType As TrxType
        Get
            Return TrxType.glngTRXTYP_TRANSFER
        End Get
    End Property

    Public Overrides Function objClone(objReg As Register) As Trx
        Dim objXferTrx As TransferTrx = New TransferTrx()
        objXferTrx.NewStartTransfer(objReg, mdatDate, mstrDescription, mstrMemo, mblnFake, mblnAwaitingReview, mblnAutoGenerated, mintRepeatSeq, mstrRepeatKey, mstrTransferKey, mcurTransferAmount)
        Return objXferTrx
    End Function

    Public Overrides Function objGetTrxManager(objReg As Register, lngIndex As Integer) As TrxManager
        Return New TransferTrxManager(objReg, lngIndex, Me)
    End Function

    Public Overrides Sub Validate(objReg As Register, lngIndex As Integer)
        MyBase.Validate(objReg, lngIndex)
        If mstrTransferKey = "" Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx requires transfer key")
        End If
        If mstrTransferKey = objReg.strRegisterKey Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot transfer to same register")
        End If
        If Not mcolSplits Is Nothing Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot have split collection")
        End If
        If mstrBudgetKey <> "" Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot have budget key")
        End If
        If mcurBudgetLimit <> 0 Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot have budget limit")
        End If
        If mcurBudgetApplied <> 0 Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot have budget applied")
        End If
        If Not mcolAppliedSplits Is Nothing Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot have applied splits collection")
        End If
        If mstrImportKey <> "" Then
            objReg.RaiseValidationError(lngIndex, "Transfer trx cannot have import key")
        End If
    End Sub
End Class
