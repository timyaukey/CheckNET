Option Strict On
Option Explicit On

Imports CheckBookLib

Friend Class RegisterForm
	Inherits System.Windows.Forms.Form
	'2345667890123456789012345678901234567890123456789012345678901234567890123456789012345
	
	Private mfrmStartup As StartupForm
	
	Private WithEvents mobjReg As Register
	
	Private mobjAccount As Account
	Private mblnLoadComplete As Boolean
    Private mdatDefaultNewDate As Date
    Private WithEvents mfrmSearch As SearchForm
    Private mblnOldVisible As Boolean

    'Column numbers.
    Private mintColDate As Integer
    Private mintColNumber As Integer
    Private mintColDescr As Integer
    Private mintColAmount As Integer
    Private mintColBalance As Integer
    Private mintColCategory As Integer
    Private mintColPONumber As Integer
    Private mintColInvoiceNum As Integer
    Private mintColInvoiceDate As Integer
    Private mintColDueDate As Integer
    Private mintColTerms As Integer
    Private mintColStatus As Integer
    Private mintColFake As Integer
    Private mintColAutoGenerated As Integer
    Private mintColImportKey As Integer

    Private mstrColValueFuncs(50) As strColumnValue

    Private mlngCOLOR_BUDGET As System.Drawing.Color = System.Drawing.Color.FromArgb(0, 0, &HA0)
    Private mlngCOLOR_CREDIT As System.Drawing.Color = System.Drawing.Color.FromArgb(0, &HA0, 0)
    Private mlngCOLOR_FAKE As System.Drawing.Color = System.Drawing.Color.FromArgb(&HF0, &HE0, &HF0)
    Private mlngCOLOR_REAL As System.Drawing.Color = System.Drawing.Color.FromArgb(255, 255, 250) '&H80000005

    Public Sub ShowMe(ByVal objAccount_ As Account, ByVal objReg_ As Register, ByVal frmStartup As StartupForm)

        mobjAccount = objAccount_
        mobjReg = objReg_
        mdatDefaultNewDate = Today

        mfrmStartup = frmStartup
        Me.Show()
        'UPGRADE_NOTE: Object mfrmStartup may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mfrmStartup = Nothing

    End Sub

    Public ReadOnly Property objReg() As Register
        Get
            objReg = mobjReg
        End Get
    End Property

    Public ReadOnly Property objAccount() As Account
        Get
            objAccount = mobjAccount
        End Get
    End Property

    '$Description The register index of the current grid row.

    Private ReadOnly Property lngRegisterIndex() As Integer
        Get
            If grdReg.CurrentRow Is Nothing Then
                Return -1
            End If
            Return grdReg.CurrentRow.Index + 1
        End Get
    End Property

    Private Sub cmdDelete_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdDelete.Click
        Dim objTrx As Trx
        Dim objXfer As TransferManager
        Dim objOtherReg As Register
        Dim intIndex As Integer

        Try
            intIndex = lngRegisterIndex()
            If (intIndex < 0) Then
                MsgBox("You must first select a transaction.", MsgBoxStyle.Critical)
                Return
            End If
            objTrx = mobjReg.objTrx(intIndex)
            With objTrx
                If .blnAutoGenerated Then
                    MsgBox("You may not delete a generated transaction.", MsgBoxStyle.Critical)
                    Exit Sub
                End If
                If .strRepeatKey <> "" Then
                    MsgBox("You can delete this transaction, but it has a repeat key " & "so the software will probably just recreate it." & vbCrLf & _
                           "If you don't want to use this transaction it is much better " & "to change the amount to zero than to delete it.", MsgBoxStyle.Critical)
                End If
                If MsgBox("Do you really want to delete the transaction dated " & gstrFormatDate(.datDate) & " for $" & gstrFormatCurrency(.curAmount) & " made out to " & .strDescription & "?", MsgBoxStyle.Question Or MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                    Exit Sub
                End If
                If .lngStatus = Trx.TrxStatus.glngTRXSTS_RECON Then
                    If MsgBox("This transaction has been reconciled to a bank statement. " & "Are you sure you want to delete it?", MsgBoxStyle.Question Or MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                        Exit Sub
                    End If
                End If
            End With
            'This will fire events which cause this form to redisplay all affected
            'parts of the grid, with one exception: it will not update the "unmatched"
            'column of any affected normal Trx when deleting a budget Trx. This seems like
            'an unimportant case, and is difficult to fix because the process of applying
            'splits does not let you find the register index of the normal Trx to which
            'a budget is applied.
            If objTrx.lngType = Trx.TrxType.glngTRXTYP_TRANSFER Then
                objXfer = New TransferManager
                objOtherReg = mobjAccount.objFindReg(DirectCast(objTrx, TransferTrx).strTransferKey)
                objXfer.DeleteTransfer(mobjReg, intIndex, objOtherReg)
            Else
                mobjReg.Delete(intIndex, New LogDelete, "RegisterForm.Delete")
            End If
            DiagnosticValidate()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdEdit_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdEdit.Click
        Try
            EditTrx()
            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub EditTrx()
        Dim lngIndex As Integer = lngRegisterIndex()
        If lngIndex < 0 Then
            MsgBox("You mus first select a register row.", MsgBoxStyle.Critical)
            Exit Sub
        End If
        Using frm As TrxForm = frmCreateTrxForm()
            If frm.blnUpdate(mobjAccount, lngIndex, mobjReg, mdatDefaultNewDate, "RegForm.Edit") Then
                Exit Sub
            End If
        End Using
        DiagnosticValidate()
    End Sub

    Private Sub cmdSearch_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdSearch.Click
        Try
            If mfrmSearch Is Nothing Then
                mfrmSearch = New SearchForm
                mfrmSearch.ShowMe(mobjReg, mobjAccount, Me)
            Else
                mfrmSearch.Show()
                mfrmSearch.Activate()
            End If

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub RegisterForm_FormClosed(ByVal eventSender As System.Object, ByVal eventArgs As System.Windows.Forms.FormClosedEventArgs) Handles Me.FormClosed
        'If we don't clear these here, the form continues to receive events
        'through mobjReg. Something about our processing for these events
        'makes the form reappear! Unloading destroys the form, but not the
        'underlying object.
        'UPGRADE_NOTE: Object mobjReg may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mobjReg = Nothing
        'UPGRADE_NOTE: Object mobjAccount may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mobjAccount = Nothing
    End Sub

    Private Sub grdReg_DoubleClick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles grdReg.DoubleClick
        Try
            EditTrx()
            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    'Populate grid columns with data for the rows that are currently visible,
    'or may become visible before RefreshPage() is called again.

    Private Sub RefreshPage()
        grdReg.Invalidate()
    End Sub

    Private Sub cmdNewNormal_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdNewNormal.Click
        Try
            Dim objTrx As NormalTrx = New NormalTrx
            objTrx.NewEmptyNormal(mobjReg, mdatDefaultNewDate)
            Using frm As TrxForm = frmCreateTrxForm()
                If frm.blnAddNormal(mobjAccount, mobjReg, objTrx, mdatDefaultNewDate, True, "RegForm.NewNormal") Then
                    MsgBox("Canceled.")
                End If
            End Using
            DiagnosticValidate()
            Exit Sub
        Catch ex As Exception
            gTopException(ex) : End Try
    End Sub

    Private Sub cmdNewBudget_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdNewBudget.Click
        Try
            Using frm As TrxForm = frmCreateTrxForm()
                If frm.blnAddBudget(mobjAccount, mobjReg, mdatDefaultNewDate, "RegForm.NewBudget") Then
                    MsgBox("Canceled.")
                End If
            End Using
            DiagnosticValidate()
            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdNewXfer_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdNewXfer.Click
        Try
            Using frm As TrxForm = frmCreateTrxForm()
                If frm.blnAddTransfer(mobjAccount, mobjReg, mdatDefaultNewDate, "RegForm.NewXfer") Then
                    MsgBox("Canceled.")
                End If
            End Using
            DiagnosticValidate()
            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Function frmCreateTrxForm() As TrxForm
        Return New TrxForm
    End Function

    Private Sub RegisterForm_Load(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles MyBase.Load
        Try

            mblnLoadComplete = True
            Me.Text = mobjReg.strTitle
            ConfigGrid()
            LoadGrid()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Delegate Function strColumnValue(ByVal objTrx As Trx) As String

    Private Function strColumnEmpty(ByVal objTrx As Trx) As String
        strColumnEmpty = ""
    End Function

    Private Sub ConfigGrid()
        Dim intCol As Integer

        ConfigGridCol(intCol, mintColDate, "Date", 700, _
            Function(objTrx As Trx) objTrx.datDate.ToString(gstrFORMAT_DATE2))
        ConfigGridCol(intCol, mintColNumber, "Number", 700, _
            Function(objTrx As Trx) objTrx.strNumber)
        ConfigGridCol(intCol, mintColDescr, "Description", 3000, _
            Function(objTrx As Trx) objTrx.strDescription)
        ConfigGridCol(intCol, mintColAmount, "Amount", 900,
            Function(objTrx As Trx) objTrx.curAmount.ToString(gstrFORMAT_CURRENCY), True)
        ConfigGridCol(intCol, mintColBalance, "Balance", 900,
            Function(objTrx As Trx) objTrx.curBalance.ToString(gstrFORMAT_CURRENCY), True)
        ConfigGridCol(intCol, mintColCategory, "Category", 1800,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL, gstrSummarizeTrxCat(DirectCast(objTrx, NormalTrx)), ""))
        ConfigGridCol(intCol, mintColPONumber, "PO#", 900,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL, gstrSummarizeTrxPONumber(DirectCast(objTrx, NormalTrx)), ""))
        ConfigGridCol(intCol, mintColInvoiceNum, "Invoice#", 900,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL, gstrSummarizeTrxInvoiceNum(DirectCast(objTrx, NormalTrx)), ""))
        ConfigGridCol(intCol, mintColInvoiceDate, "Inv. Date", 700,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL, gstrSummarizeTrxInvoiceDate(DirectCast(objTrx, NormalTrx)), ""))
        ConfigGridCol(intCol, mintColDueDate, "Due Date", 700,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL, gstrSummarizeTrxDueDate(DirectCast(objTrx, NormalTrx)), ""))
        ConfigGridCol(intCol, mintColTerms, "Terms", 800,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL, gstrSummarizeTrxTerms(DirectCast(objTrx, NormalTrx)), ""))
        ConfigGridCol(intCol, mintColFake, "Fake", 500, _
            Function(objTrx As Trx) If(objTrx.lngType <> Trx.TrxType.glngTRXTYP_BUDGET, If(objTrx.blnFake, "Y", ""), "-"))
        ConfigGridCol(intCol, mintColAutoGenerated, "Gen", 500,
            Function(objTrx As Trx) If(objTrx.blnAutoGenerated, "Y", ""))
        ConfigGridCol(intCol, mintColImportKey, "Imported", 800,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL,
                If(String.IsNullOrEmpty(DirectCast(objTrx, NormalTrx).strImportKey), "", "Y"), ""))
        ConfigGridCol(intCol, mintColStatus, "Status", 600,
            Function(objTrx As Trx) If(objTrx.lngType = Trx.TrxType.glngTRXTYP_NORMAL,
                "? RNS".Substring(objTrx.lngStatus, 1), ""))
        grdReg.Columns(mintColDescr).Frozen = True

        grdReg.ColumnCount = intCol
    End Sub

    Private Sub ConfigGridCol(ByRef intColCounter As Integer, ByRef intColSave As Integer, ByVal strLabel As String,
        ByVal intWidth As Integer, ByVal strValueFunc As strColumnValue, Optional ByVal blnRightAlign As Boolean = False)

        Dim col As DataGridViewTextBoxColumn
        col = New DataGridViewTextBoxColumn()
        col.HeaderText = strLabel
        col.Width = CInt(intWidth / 12)
        If blnRightAlign Then
            col.DefaultCellStyle.Alignment = DataGridViewContentAlignment.TopRight
        End If
        grdReg.Columns.Add(col)
        intColSave = intColCounter
        mstrColValueFuncs(intColSave) = strValueFunc
        intColCounter = intColCounter + 1
    End Sub

    Private Sub LoadGrid()
        Dim lngIndex As Integer
        'Select the first Trx on the latest date on or before this.
        Dim datTargetDate As Date
        'The index and date of the Trx currently chosen to be selected.
        Dim lngSelectIndex As Integer
        Dim datSelectDate As Date
        'The date of the current Trx.
        Dim datCurrentDate As Date
        Dim strMonthYear As String = ""
        Dim strNewMonthYear As String = ""

        grdReg.RowCount = mobjReg.lngTrxCount
        lngSelectIndex = 0
        datSelectDate = System.Date.FromOADate(0)
        datTargetDate = Today
        For lngIndex = 1 To mobjReg.lngTrxCount
            datCurrentDate = mobjReg.objTrx(lngIndex).datDate
            strNewMonthYear = CStr(Year(datCurrentDate))
            If strNewMonthYear <> strMonthYear Then
                strMonthYear = strNewMonthYear
                If Not mfrmStartup Is Nothing Then
                    mfrmStartup.ShowStatus("Formatting " & mobjReg.strTitle & " " & strMonthYear)
                End If
            End If
            'AllocateGridRow lngIndex
            If datCurrentDate <= datTargetDate Then
                If datCurrentDate > datSelectDate Then
                    lngSelectIndex = lngIndex
                    datSelectDate = datCurrentDate
                End If
            End If
        Next
        If lngSelectIndex > 0 Then
            mobjReg.SetCurrent(lngSelectIndex)
            mobjReg.RaiseShowCurrent()
        End If
        RefreshPage()
        mobjReg.ValidateRegister()
    End Sub

    Private Sub grdReg_CellValueNeeded(ByVal sender As System.Object, _
        ByVal e As System.Windows.Forms.DataGridViewCellValueEventArgs) Handles grdReg.CellValueNeeded
        If Not mobjReg Is Nothing Then
            Dim objTrx As Trx
            If e.RowIndex < mobjReg.lngTrxCount Then
                objTrx = mobjReg.objTrx(e.RowIndex + 1)
                e.Value = mstrColValueFuncs(e.ColumnIndex)(objTrx)
            End If
        End If
    End Sub

    Private Sub grdReg_CellFormatting(ByVal sender As Object, ByVal e As System.Windows.Forms.DataGridViewCellFormattingEventArgs) Handles grdReg.CellFormatting
        Dim objTrx As Trx
        If Not mobjReg Is Nothing Then
            If e.RowIndex < mobjReg.lngTrxCount Then
                objTrx = mobjReg.objTrx(e.RowIndex + 1)
                If objTrx.blnFake Then
                    e.CellStyle.BackColor = mlngCOLOR_FAKE
                Else
                    e.CellStyle.BackColor = mlngCOLOR_REAL
                End If
                If objTrx.curAmount > 0 Then
                    e.CellStyle.ForeColor = mlngCOLOR_CREDIT
                ElseIf objTrx.lngType = Trx.TrxType.glngTRXTYP_BUDGET Then
                    e.CellStyle.ForeColor = mlngCOLOR_BUDGET
                Else
                    e.CellStyle.ForeColor = Color.Black
                End If
            End If
        End If
    End Sub

    Private Sub DisplayTrx(ByVal lngIndex As Integer)
        Dim objTrx As Trx

        objTrx = mobjReg.objTrx(lngIndex)
        DisplayTrxShared(objTrx)
        Select Case objTrx.lngType
            Case Trx.TrxType.glngTRXTYP_NORMAL
                DisplayTrxNormal(objTrx)
            Case Trx.TrxType.glngTRXTYP_BUDGET
                DisplayTrxBudget(objTrx)
            Case Trx.TrxType.glngTRXTYP_TRANSFER
                DisplayTrxTransfer(objTrx)
            Case Else
                gRaiseError("Invalid Trx type in DisplayTrx")
        End Select
    End Sub

    Private Sub SelectTrx(ByVal lngIndex As Integer)
        Dim lngGridRow As Integer

        lngGridRow = lngIndexToGridRow(lngIndex)
        grdReg.CurrentCell = grdReg.Rows(lngGridRow - 1).Cells(0)
        HighlightCurrentRow()
    End Sub

    Private Sub HighlightCurrentRow()
        With grdReg
            'TODO
        End With
    End Sub

    Private Sub DisplayTrxShared(ByVal objTrx As Trx)
        grdReg.InvalidateRow(grdReg.CurrentRow.Index)
    End Sub

    Private Function strRepeatUnit(ByVal lngRepeatUnit As Trx.RepeatUnit) As String
        Select Case lngRepeatUnit
            Case Trx.RepeatUnit.glngRPTUNT_DAY
                strRepeatUnit = "Days"
            Case Trx.RepeatUnit.glngRPTUNT_WEEK
                strRepeatUnit = "Weeks"
            Case Trx.RepeatUnit.glngRPTUNT_MONTH
                strRepeatUnit = "Months"
            Case Else
                strRepeatUnit = ""
        End Select
    End Function

    Private Sub DisplayTrxStatus(ByVal objTrx As Trx)
        grdReg.InvalidateRow(grdReg.CurrentRow.Index)
    End Sub

    Private Sub DisplayTrxNormal(ByVal objTrx As Trx)
        grdReg.InvalidateRow(grdReg.CurrentRow.Index)
    End Sub

    Private Sub DisplayTrxBudget(ByVal objTrx As Trx)
        grdReg.InvalidateRow(grdReg.CurrentRow.Index)
    End Sub

    Private Sub DisplayTrxTransfer(ByVal objTrx As Trx)
        grdReg.InvalidateRow(grdReg.CurrentRow.Index)
    End Sub

    Private Function lngIndexToGridRow(ByVal lngIndex As Integer) As Integer
        lngIndexToGridRow = lngIndex
    End Function

    Private Sub mfrmSearch_FormClosed(ByVal eventSender As System.Object, ByVal eventArgs As System.Windows.Forms.FormClosedEventArgs) Handles mfrmSearch.FormClosed
        'UPGRADE_NOTE: Object mfrmSearch may not be destroyed until it is garbage collected. Click for more: 'ms-help://MS.VSCC.v90/dv_commoner/local/redirect.htm?keyword="6E35BFF6-CD74-4B09-9689-3E1A43DF8969"'
        mfrmSearch = Nothing
    End Sub

    Private Sub mobjReg_BalancesChanged(ByVal lngFirstIndex As Integer, ByVal lngLastIndex As Integer) Handles mobjReg.BalancesChanged
        Try
            If mintColBalance > 0 Then
                grdReg.Invalidate()
            End If

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_BudgetChanged(ByVal lngIndex As Integer, ByVal objBudget As Trx) Handles mobjReg.BudgetChanged
        Try

            DisplayTrx(lngIndexToGridRow(lngIndex))

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_HideTrx() Handles mobjReg.HideTrx
        Try

            mblnOldVisible = Me.Visible
            Me.Visible = False
            System.Windows.Forms.Application.DoEvents()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_RedisplayTrx() Handles mobjReg.RedisplayTrx
        Try

            LoadGrid()
            Me.Visible = mblnOldVisible

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_ShowCurrent(ByVal lngIndex As Integer) Handles mobjReg.ShowCurrent
        Try

            SelectTrx(lngIndex)

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_StatusChanged(ByVal lngIndex As Integer) Handles mobjReg.StatusChanged
        Try

            grdReg.CurrentCell = grdReg.CurrentRow.Cells(0)
            DisplayTrxStatus(mobjReg.objTrx(lngIndex))

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_TrxAdded(ByVal lngIndex As Integer, ByVal objTrx As Trx) Handles mobjReg.TrxAdded
        Try

            grdReg.RowCount = grdReg.RowCount + 1
            grdReg.Invalidate()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_TrxDeleted(ByVal lngIndex As Integer) Handles mobjReg.TrxDeleted
        Try

            grdReg.RowCount = grdReg.RowCount - 1
            grdReg.Invalidate()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_TrxUpdated(ByVal lngOldIndex As Integer, ByVal lngNewIndex As Integer, ByVal objTrx As Trx) Handles mobjReg.TrxUpdated
        Try

            If lngNewIndex <> lngOldIndex Then
                grdReg.Invalidate()
            Else
                grdReg.InvalidateRow(grdReg.CurrentRow.Index)
            End If

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub mobjReg_ValidationError(ByVal lngIndex As Integer, ByVal strMsg As String) Handles mobjReg.ValidationError
        Dim objTrx As Trx
        Dim strTrxSummary As String = ""

        Try

            If lngIndex > 0 Then
                objTrx = mobjReg.objTrx(lngIndex)
                strTrxSummary = ", " & strTrxSummaryForMsg(objTrx)
            End If
            MsgBox("Validation error on register index " & lngIndex & strTrxSummary & ":" & vbCrLf & strMsg)

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Function strTrxSummaryForMsg(ByVal objTrx As Trx) As String
        strTrxSummaryForMsg = gstrFormatDate(objTrx.datDate) & " " & objTrx.strDescription & " $" & gstrFormatCurrency(objTrx.curAmount)
    End Function

    Private Sub DiagnosticValidate()
        mobjReg.ValidateRegister()
    End Sub
End Class