Option Strict On
Option Explicit On

Imports CheckBookLib

Friend Class ShowRegisterForm
    Inherits System.Windows.Forms.Form

    Private Structure ShowRegElement
        Dim objAccount As Account
        Dim objReg As Register

        Public ReadOnly Property objSelectedReg() As Register
            Get
                If Not objReg Is Nothing Then
                    Return objReg
                End If
                If objAccount.colRegisters.Count = 1 Then
                    Return objAccount.colRegisters(0)
                End If
                Return Nothing
            End Get
        End Property
    End Structure

    Private mobjCompany As Company
    Private maudtElement() As ShowRegElement
    Private mintElements As Integer

    Public Sub ShowWindow(ByVal objCompany As Company)
        mobjCompany = objCompany
        Me.Show()
    End Sub

    Private Sub cmdCancel_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdCancel.Click
        Me.Close()
    End Sub

    Private Sub cmdDeleteRegister_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdDeleteRegister.Click
        Dim objTrx As Trx
        Dim objReg As Register
        Dim objOtherReg As Register
        Dim lngTrxIdx As Integer
        Dim objXfer As TransferManager

        Try

            If Not gobjSecurity.blnIsAdministrator Then
                MsgBox("Your login is not authorized to delete registers.")
                Exit Sub
            End If

            If gcolForms().Count() <> 1 Then
                MsgBox("You may not delete a register while other windows are open.", MsgBoxStyle.Critical)
                Exit Sub
            End If

            With maudtElement(lstRegisters.SelectedIndex)
                If .objSelectedReg Is Nothing Then
                    MsgBox("You must select a register, not an account.", MsgBoxStyle.Information)
                    Exit Sub
                End If
                If .objAccount.blnUnsavedChanges Then
                    MsgBox("You may not delete a register from an account " & "with unsaved changes.", MsgBoxStyle.Critical)
                    Exit Sub
                End If
                If .objAccount.colRegisters.Count() <= 1 Then
                    MsgBox("You may not delete the last register from an account.", MsgBoxStyle.Critical)
                    Exit Sub
                End If
                objReg = .objSelectedReg
                If MsgBox("Do you really want to delete register """ & objReg.strTitle & """?", MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                    Exit Sub
                End If
                If MsgBox("Are you really sure you want to delete it?", MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                    Exit Sub
                End If
                MsgBox("Will delete all transfers to/from other registers.", MsgBoxStyle.Information)
                'Now look for non-generated transfers and delete them,
                'so the other half of the transfer is deleted from whatever
                'register it belongs to. Don't worry about generated transfers,
                'because they won't be recreated once this register is deleted.
                'Can't use a "For" loop here because the upper limit changes
                'if Trx are deleted.
                lngTrxIdx = 1
                Do
                    If lngTrxIdx > objReg.lngTrxCount Then
                        Exit Do
                    End If
                    objTrx = objReg.objTrx(lngTrxIdx)
                    If Not objTrx.blnAutoGenerated Then
                        If objTrx.lngType = Trx.TrxType.glngTRXTYP_TRANSFER Then
                            objXfer = New TransferManager
                            objOtherReg = .objAccount.objFindReg(DirectCast(objTrx, TransferTrx).strTransferKey)
                            objXfer.DeleteTransfer(objReg, lngTrxIdx, objOtherReg)
                            'Step back, because the next iteration must try
                            'the same index or else we'll skip a trx.
                            lngTrxIdx = lngTrxIdx - 1
                        End If
                    End If
                    lngTrxIdx = lngTrxIdx + 1
                Loop
                objReg.blnDeleted = True
                .objAccount.SetChanged()
            End With
            MsgBox("Register deleted. Will quit program now, to save this change to the account.", MsgBoxStyle.Information)
            CBMainForm.Close()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdNewAccount_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdNewAccount.Click
        Try

            If Not gobjSecurity.blnIsAdministrator Then
                MsgBox("Your login is not authorized to create accounts.")
                Exit Sub
            End If

            If gblnAskAndCreateAccount(mobjCompany) Then
                MsgBox("Account will appear the next time you start the software.", MsgBoxStyle.Information)
            End If

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdDeleteAccount_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdDeleteAccount.Click
        Dim strNameRoot As String

        Try

            If Not gobjSecurity.blnIsAdministrator Then
                MsgBox("Your login is not authorized to delete accounts.")
                Exit Sub
            End If

            If gcolForms().Count() <> 1 Then
                MsgBox("You may not delete an account while other windows are open.", MsgBoxStyle.Critical)
                Exit Sub
            End If

            With maudtElement(lstRegisters.SelectedIndex)
                strNameRoot = Replace(LCase(.objAccount.strFileLoaded), ".act", "")
                If MsgBox("Are you sure you want to delete account """ & .objAccount.strTitle & """?", MsgBoxStyle.Question Or MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                    Exit Sub
                End If
                If MsgBox("Are you REALLY, REALLY, SURE you want to delete account """ & .objAccount.strTitle & """?", MsgBoxStyle.Question Or MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                    Exit Sub
                End If
            End With
            DeleteAccount(strNameRoot)
            MsgBox("Account deleted. Will quit program now, to save this change.", MsgBoxStyle.Information)
            CBMainForm.Close()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub DeleteAccount(ByVal strNameRoot As String)
        Dim strFile As String

        Try

            Do
                strFile = Dir(gstrBackupPath() & "\" & strNameRoot & ".act.*")
                If strFile = "" Then
                    Exit Do
                End If
                Kill(gstrBackupPath() & "\" & strFile)
            Loop

            strFile = gstrAccountPath() & "\" & strNameRoot & ".rep"
            If Dir(strFile) <> "" Then
                Kill(strFile)
            End If

            'It looks for ACT files to find accounts, so delete this one last
            'in case it crashes deleting other files. So you can try again.
            strFile = gstrAccountPath() & "\" & strNameRoot & ".act"
            If Dir(strFile) <> "" Then
                Kill(strFile)
            End If

            Exit Sub
        Catch ex As Exception
            gNestedException(ex)
        End Try
    End Sub

    Private Sub cmdNewRegister_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdNewRegister.Click
        Dim strName As String
        Dim intHighestKey As Integer
        Dim objReg As Register

        Try

            If Not gobjSecurity.blnIsAdministrator Then
                MsgBox("Your login is not authorized to create a new register.")
                Exit Sub
            End If

            strName = InputBox("Name of new register:", "New Register")
            If strName = "" Then
                Exit Sub
            End If

            With maudtElement(lstRegisters.SelectedIndex)
                If MsgBox("Do you really want to create a new register named """ & strName & """ in account """ & .objAccount.strTitle & """?", MsgBoxStyle.Question Or MsgBoxStyle.OkCancel Or MsgBoxStyle.DefaultButton2) <> MsgBoxResult.Ok Then
                    Exit Sub
                End If
                For Each objReg In .objAccount.colRegisters
                    If CInt(Val(objReg.strRegisterKey)) > intHighestKey Then
                        intHighestKey = CInt(Val(objReg.strRegisterKey))
                    End If
                Next objReg
                .objAccount.CreateRegister(CStr(intHighestKey + 1), strName, True)
                .objAccount.SetChanged()
                MsgBox("New register has been added to account and will appear the " & "next time you start the software.", MsgBoxStyle.Information)
            End With

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdSetAccountProperties_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdSetAccountProperties.Click
        Dim strTitle As String
        Dim strFileName As String
        Dim lngType As Account.AccountType

        Try

            With maudtElement(lstRegisters.SelectedIndex)
                strTitle = .objAccount.strTitle
                strFileName = .objAccount.strFileLoaded
                lngType = .objAccount.lngType
                Using frm As AccountForm = New AccountForm
                    If frm.ShowDialog(strTitle, strFileName, lngType, True, Not gobjSecurity.blnIsAdministrator) = DialogResult.OK Then
                        .objAccount.strTitle = strTitle
                        MsgBox("Account property changes will take effect the next time you start the software.", MsgBoxStyle.Information)
                    End If
                End Using
            End With

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdShowRegister_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdShowRegister.Click
        Try

            If lstRegisters.SelectedIndex < 0 Then
                MsgBox("Please select a register first.", MsgBoxStyle.Critical)
                Exit Sub
            End If

            With maudtElement(lstRegisters.SelectedIndex)
                If .objSelectedReg Is Nothing Then
                    MsgBox("You must select a register, not an account.", MsgBoxStyle.Information)
                    Exit Sub
                End If
                gShowRegister(.objAccount, .objSelectedReg, Nothing)
            End With
            Me.Close()

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdRegProperties_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdRegProperties.Click
        Dim objProps As RegPropertiesForm

        Try

            If lstRegisters.SelectedIndex < 0 Then
                MsgBox("Please select a register first.", MsgBoxStyle.Critical)
                Exit Sub
            End If

            With maudtElement(lstRegisters.SelectedIndex)
                If .objSelectedReg Is Nothing Then
                    MsgBox("You must select a register, not an account.", MsgBoxStyle.Information)
                    Exit Sub
                End If
                objProps = New RegPropertiesForm
                objProps.ShowModal(.objSelectedReg, Not gobjSecurity.blnIsAdministrator)
            End With

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub cmdRegen_Click(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles cmdRegen.Click

        Try

            Dim strRegisterEndDate As String = InputBox("Enter ending date to generate transactions through:",
                "Ending Date", gstrFormatDate(DateAdd(Microsoft.VisualBasic.DateInterval.Day, 90, Now)))
            If strRegisterEndDate <> "" Then
                If gblnValidDate(strRegisterEndDate) Then
                    Dim objAccount As Account
                    System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor
                    'Need to do all accounts, not just the selected account, because there may be many, many
                    'accounts and even there are only a few each one can create trx in others through
                    'balance sheet categories in trx.
                    For Each objAccount In mobjCompany.colAccounts
                        objAccount.RecreateGeneratedTrx(CDate(strRegisterEndDate))
                    Next
                    For Each objAccount In mobjCompany.colAccounts
                        'Tell all register windows to refresh themselves.
                        For Each objReg As Register In objAccount.colRegisters
                            'Recompute the running balances, because replica trx can be added anywhere.
                            objReg.LoadFinish()
                            objReg.FireRedisplayTrx()
                        Next objReg
                    Next
                    System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default
                Else
                    MsgBox("Invalid date.")
                End If
            End If

            Exit Sub
        Catch ex As Exception
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.Default
            gTopException(ex)
        End Try
    End Sub

    Private Sub ShowRegisterForm_Load(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles MyBase.Load
        Dim objAccount As Account
        Dim objReg As Register

        Try

            Me.Width = 540
            Me.Height = 450

            Erase maudtElement
            mintElements = 0
            lstRegisters.Items.Clear()

            For Each objAccount In gcolAccounts
                mintElements = mintElements + 1
                ReDim Preserve maudtElement(mintElements - 1)
                With maudtElement(mintElements - 1)
                    .objAccount = objAccount
                    .objReg = Nothing
                    .objReg = Nothing
                    lstRegisters.Items.Add(objAccount.strTitle)
                End With
                If objAccount.colRegisters.Count > 1 Then
                    For Each objReg In objAccount.colRegisters
                        mintElements = mintElements + 1
                        ReDim Preserve maudtElement(mintElements - 1)
                        With maudtElement(mintElements - 1)
                            .objAccount = objAccount
                            .objReg = objReg
                            lstRegisters.Items.Add("-- " & .objReg.strTitle)
                        End With
                    Next objReg
                End If
            Next objAccount

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub lstRegisters_SelectedIndexChanged(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles lstRegisters.SelectedIndexChanged
        Dim blnRegisterSelected As Boolean
        Dim blnOneRegister As Boolean

        Try

            blnRegisterSelected = Not (maudtElement(lstRegisters.SelectedIndex).objReg Is Nothing)
            blnOneRegister = (maudtElement(lstRegisters.SelectedIndex).objAccount.colRegisters.Count = 1)
            cmdSetAccountProperties.Enabled = Not blnRegisterSelected
            cmdDeleteAccount.Enabled = Not blnRegisterSelected
            cmdShowRegister.Enabled = blnRegisterSelected Or blnOneRegister
            cmdDeleteRegister.Enabled = blnRegisterSelected
            cmdEditGenerators.Enabled = blnRegisterSelected Or blnOneRegister
            cmdNewRegister.Enabled = Not blnRegisterSelected
            cmdRegProperties.Enabled = blnRegisterSelected Or blnOneRegister

            Exit Sub
        Catch ex As Exception
            gTopException(ex)
        End Try
    End Sub

    Private Sub lstRegisters_DoubleClick(ByVal eventSender As System.Object, ByVal eventArgs As System.EventArgs) Handles lstRegisters.DoubleClick
        cmdShowRegister_Click(cmdShowRegister, New System.EventArgs())
    End Sub

    Private Sub cmdEditGenerators_Click(sender As Object, e As EventArgs) Handles cmdEditGenerators.Click
        With maudtElement(lstRegisters.SelectedIndex)

            Using frm As New FileListEditorForm
                frm.ShowDialogForPath("Transaction Generators", gstrGeneratorPath(.objAccount, .objSelectedReg),
                    "gen", New TrxGenFilePersister())
            End Using
        End With
    End Sub
End Class